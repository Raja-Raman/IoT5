/*  WeMos D1 Arduino compatible ESP8266 Wifi Board from Banggood.com
// http://randomnerdtutorials.com/esp8266-daily-task-publish-temperature-readings-to-thingspeak/
 * ESP8266 Daily Task
 * Rui Santos 
 * Complete Project Details http://randomnerdtutorials.com
 */
 // curl "api.thingspeak.com/update?api_key=<yourkey>&field1=77&field2=11"
 
#include <ESP8266WiFi.h>

// Replace with your SSID and Password
const char* ssid     = "<SSID>";
const char* password = "<passwd>";

// Replace with your unique Thing Speak WRITE API KEY
const char* apiKey = "REPLACE_WITH_YOUR_ThingSpeak_WRITE_API_KEY";
  
const char* resource = "/update?api_key=";

// Thing Speak API server 
const char* server = "api.thingspeak.com";

void setup() {
  Serial.begin(9600);
  Serial.println("\n\nThingsSpeak client starting...");
  Serial.println("Connect to https://thingspeak.com/channels/<your_channel>/private_show");
  delay(10);
  initWifi();
  makeHTTPRequest();
}

void loop() {
  // nothing here
}

// Establish a Wi-Fi connection with your router
void initWifi() {
  Serial.print("Connecting to: "); 
  Serial.print(ssid);
  WiFi.begin(ssid, password);  

  int timeout = 10 * 4; // 10 seconds
  while(WiFi.status() != WL_CONNECTED  && (timeout-- > 0)) {
    delay(250);
    Serial.print(".");
  }
  Serial.println("");

  if(WiFi.status() != WL_CONNECTED) {
     Serial.println("Failed to connect to WiFi.");
  }
  else {
    Serial.print("WiFi connected in: "); 
    Serial.print(millis());
    Serial.print(" mSec, IP address: "); 
    Serial.println(WiFi.localIP());
  }
}

// Make an HTTP request to Thing Speak
void makeHTTPRequest() {
 
 int humidity = 11;
 int temperature = 22;
 
  Serial.print("Connecting to "); 
  Serial.print(server);
  
  WiFiClient client;
  int retries = 5;
  while(!!!client.connect(server, 80) && (retries-- > 0)) {
    Serial.print(".");
  }
  Serial.println();
  if(!!!client.connected()) {
     Serial.println("Failed to connect, going back to sleep");
  }
  
  Serial.print("Request resource: "); 
  Serial.println(resource);
  client.print(String("GET ") + resource + apiKey + "&field1=" + humidity + "&field2=" + temperature +
                  " HTTP/1.1\r\n" +
                  "Host: " + server + "\r\n" + 
                  "Connection: close\r\n\r\n");
                  
  int timeout = 5 * 10; // 5 seconds             
  while(!!!client.available() && (timeout-- > 0)){
    delay(100);
  }
  if(!!!client.available()) {
     Serial.println("No response, going back to sleep");
  }
  while(client.available()){
    Serial.write(client.read());
  }
  
  Serial.println("\nclosing connection");
  client.stop();
}
